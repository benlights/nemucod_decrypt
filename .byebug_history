c
q
c
key_file.read.length
key_file.pos = 0
key_file.read.length
key_file.read.lengt
key_file.read
key_file.pos = 0
q
key_file.read
key_file.pos = 0
key_file.read
c
key_file.read
c
key_file.read
c
key_file.read
c
key_file.read
key_file.flush
key_file.read
c
q
unpack[key_byte].to_s(2)
unpack[key_byte]
key_byte.to_i(2)
key_byte
c
q
key[0]
q
c
unpack[crypted_byte]
unpack[key_byte]
key_byte
q
c
key[0...5].map(&unpack).map{|c| c.to_s(2)}
"8c".to_i(16).to_s(2)
"8c".to_i(16)
key[0...5].map(&unpack).map{|c| c.to_s(2)}
key[0...5].map(&unpack).map{|c| c.to_s(16)}
unpack[key[0]].to_s(2)
unpack[key[0]]
key[0...5].map(&unpack).map{|c| c.to_i(16)}
key[0...5].map(&unpack).map{|c| c}
key[0...5].map(&unpack).map{|c| c.to_i(2)}
key[0...5].map(&unpack).map {|c| c.to_i(2)}
key[0...5].map &unpack
key[0...5].unpack('b8')
key[0...5]
key[0...5].pack('b8').to_i(2)
key[0...5].pack('b*').to_i(2)
key[0...5].pack 'b*'
key[0...5]
key[1]
key[0]
key
c
key
q
key
q
key
c
pack[164]
unpack[byte]
pack[byte]
c
byte.unpack('b8b8b8').first.to_i(2)
byte.unpack('b8b8b8').first
Array(byte.unpack('b8b8b8').first).pack('b8')
q
Array(byte.unpack('b8b8b8').first).pack('b8')
byte.unpack('b8b8b8').first
byte.unpack('b8b8b8')
byte.unpack('b8b8')
byte.unpack('b8')
 byte = File.read reference_file, 10, offset, mode: 'rb'
byte.unpack('b8')
c
byte.unpack('b8')
byte
bytes
c
File.read reference_file, 1, offset, mode: 'rb'
offset = 1
File.read reference_file, 1, offset, mode: 'rb'
offset = 0
File.read reference_file, 1, offset, mode: 'rb'
bytes.unpack('b8')
bytes.split('')
bytes.split('').map { |c| c.unpack('b8') }
c
key
next
q
key.map {|w| w.to_s(2)}
key.map {|w| w.to_s(2)}.pack('b*')
key.map {|w| w.to_s(2)}.each {|w| w.unpack('b8')}
key.map {|w| w.to_s(2)}.each {|w| w.pack('b8')}
key.map {|w| w.to_s(2)}.pack('b8')
key.map {|w| w.to_s(2)}
key
crypted_words.each_with_index {|e,i| key[i] = e ^ words[i] }
crypted_words.each_with_index {|e,i| puts i}
key = []
crypted_words = crypted_bytes.split('').map { |c| c.unpack('b8').first }.map { |w| w.to_i 2 }
crypted_words = crypted_bytes.split('').map { |c| c.unpack('b8').first }.flatten.join.length
crypted_words = crypted_bytes.split('').map { |c| c.unpack('b8').first }.flatten
crypted_words = crypted_bytes.split('').map { |c| c.unpack('b8').first }.flatten.length
crypted_words = crypted_bytes.split('').map { |c| c.unpack('b8').first }.map { |w| w.to_i 2 }
words = bytes.split('').map { |c| c.unpack('b8').first }.map { |w| w.to_i(2) }
bytes.split('').map { |c| c.unpack('b8').first }.map { |w| w.to_i(2) }
bytes.split('').map { |c| c.unpack('b8').first }
bytes.split('').map { |c| c.unpack('b*').first }
bytes.split('').map { |c| c.unpack('b*') }
bytes.split('')
bytes.split
bytes[offset...(offset + 1)].unpack('b*')
bytes[offset...(offset + 1)]
bytes[offset..(offset + 1)]
bytes.unpack('b*').first.length
offset = 0
words = []
bytes.unpack('b*')
bytes.unpack('b8*')
bytes.unpack('b8')
bytes
bytes.unpack('b*').map {|o| o.to_i(2)}
bytes.unpack('b*').map {|o| o.to_i}
bytes.unpack('b*').map {|o| o.to_i(2)}
bytes.unpack('b*').to_i(2)
bytes.unpack('b*')
bytes.unpack('b')
bytes.unpack('b1')
q
bytes[0...8]
bytes[0...5]
bytes
crypted_bytes
bytes
